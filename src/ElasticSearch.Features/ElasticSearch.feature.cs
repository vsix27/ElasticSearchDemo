// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ElasticTest.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ElasticSearch using Elastic.Net package")]
    public partial class ElasticSearchUsingElastic_NetPackageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ElasticSearch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ElasticSearch using Elastic.Net package", "\tIn order to proof concept \r\n\tI want to demonstrated CRUD operations ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See Elastic Health")]
        [NUnit.Framework.CategoryAttribute("Health")]
        public virtual void SeeElasticHealth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See Elastic Health", new string[] {
                        "Health"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I run <GET /_cluster/health>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the result should not be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve Item from Elastic Search")]
        [NUnit.Framework.CategoryAttribute("CRUD")]
        public virtual void RetrieveItemFromElasticSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve Item from Elastic Search", new string[] {
                        "CRUD"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
  testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.When("I get index <library> with type <books> with id <2>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
  testRunner.Then("this item should be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve NON Existing Item from Elastic Search")]
        [NUnit.Framework.CategoryAttribute("CRUD")]
        public virtual void RetrieveNONExistingItemFromElasticSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve NON Existing Item from Elastic Search", new string[] {
                        "CRUD"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
  testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
  testRunner.When("I get index <library> with type <books> with id <GUID>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
  testRunner.Then("this item should not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Item to Elastic Search")]
        [NUnit.Framework.CategoryAttribute("CRUD")]
        public virtual void AddItemToElasticSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Item to Elastic Search", new string[] {
                        "CRUD"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "line"});
            table1.AddRow(new string[] {
                        "{"});
            table1.AddRow(new string[] {
                        "\"title\": \"another book about them\","});
            table1.AddRow(new string[] {
                        "\"name\": {"});
            table1.AddRow(new string[] {
                        "\"first\": \"john\","});
            table1.AddRow(new string[] {
                        "\"last\": \"doe\""});
            table1.AddRow(new string[] {
                        "},"});
            table1.AddRow(new string[] {
                        "\"publish_date\": \"2016-03-27T06:11:22-0400\","});
            table1.AddRow(new string[] {
                        "\"price\": 21.27"});
            table1.AddRow(new string[] {
                        "}"});
#line 26
  testRunner.When("I put index <library> with type <books> with id <2> with json", ((string)(null)), table1, "When ");
#line 37
  testRunner.Then("this item should be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Item in Elastic Search")]
        [NUnit.Framework.CategoryAttribute("CRUD")]
        public virtual void UpdateItemInElasticSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Item in Elastic Search", new string[] {
                        "CRUD"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
  testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "line"});
            table2.AddRow(new string[] {
                        "{"});
            table2.AddRow(new string[] {
                        "\"title\": \"yet another book about GUID\","});
            table2.AddRow(new string[] {
                        "\"itin\": \"GUID\""});
            table2.AddRow(new string[] {
                        "}"});
#line 42
  testRunner.When("I update index <library> with type <books> with id <2> with json", ((string)(null)), table2, "When ");
#line 48
  testRunner.Then("this item should be found with new version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Item from Elastic Search")]
        [NUnit.Framework.CategoryAttribute("CRUD")]
        public virtual void DeleteItemFromElasticSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Item from Elastic Search", new string[] {
                        "CRUD"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
  testRunner.Given("Elastic is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "line"});
            table3.AddRow(new string[] {
                        "{"});
            table3.AddRow(new string[] {
                        "\"title\": \"real book about GUID\","});
            table3.AddRow(new string[] {
                        "\"itin\": \"GUID\""});
            table3.AddRow(new string[] {
                        "}"});
#line 53
  testRunner.When("I put index <library> with type <books> with id <GUID> with json", ((string)(null)), table3, "When ");
#line 59
 testRunner.And("delete this item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.Then("this item should not be found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
