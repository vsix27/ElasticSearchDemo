// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kafka.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("KafkaBrokers")]
    public partial class KafkaBrokersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KafkaBrokers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "KafkaBrokers", "\tIn order to avoid silly mistakes\r\n\tAs an Kafka amateur\r\n\tI want to consume Kafka" +
                    " metadata", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka messages")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToProduceAndConsumeKafkaMessages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka messages", new string[] {
                        "FileProc_Kafka"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.Given("I have expression Random GUID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
testRunner.When("I send it to kafka prmlinux02.cloudapp.net:9092 server to TestMessage topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka server")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToConsumeKafkaServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka server", new string[] {
                        "FileProc_Kafka"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "zookeeper",
                        "kafka broker"});
            table1.AddRow(new string[] {
                        "172.26.8.13:2181",
                        "shortfusedev-dn8.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "172.26.8.13:2181",
                        "shortfusedev-dn9.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "172.26.8.13:2181",
                        "shortfusedev-dn10.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "172.26.8.13:2181",
                        "shortfusedev-dn11.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "prmlinux02.cloudapp.net:2181",
                        "prmlinux02.cloudapp.net:9092"});
#line 15
  testRunner.Given("I have kafka brokers", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "zookeeper",
                        "topic",
                        "info"});
            table2.AddRow(new string[] {
                        "prmlinux02.cloudapp.net:2181",
                        "Test_Claim",
                        "16 messages"});
#line 23
  testRunner.And("I have kafka topics", ((string)(null)), table2, "And ");
#line 32
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
  testRunner.Then("I should retreive it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
