// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kafka.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("KafkaBrokers")]
    public partial class KafkaBrokersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KafkaBrokers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "KafkaBrokers", "In order to avoid silly mistakes\r\nAs an Kafka amateur\r\nI want to consume Kafka me" +
                    "tadata", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - prmlinux02 - messages")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_produce")]
        public virtual void AbleToProduceAndConsumeKafka_Prmlinux02_Messages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - prmlinux02 - messages", new string[] {
                        "FileProc_Kafka_produce"});
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
  testRunner.When("I send it to kafka prmlinux02.cloudapp.net:9092 server to TestMessage topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - 172.26.11.135 - messages")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_produce")]
        public virtual void AbleToProduceAndConsumeKafka_172_26_11_135_Messages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - 172.26.11.135 - messages", new string[] {
                        "FileProc_Kafka_produce"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
  testRunner.When("I send it to kafka 172.26.11.135:9092 server to TestMessage topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - shortfusedev-dn9.westus.cloudapp.azure.com:90" +
            "92 - messages to Claim topic")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_produce")]
        public virtual void AbleToProduceAndConsumeKafka_Shortfusedev_Dn9_Westus_Cloudapp_Azure_Com9092_MessagesToClaimTopic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - shortfusedev-dn9.westus.cloudapp.azure.com:90" +
                    "92 - messages to Claim topic", new string[] {
                        "FileProc_Kafka_produce"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
  testRunner.When("I send it to kafka shortfusedev-dn9.westus.cloudapp.azure.com:9092 server to Clai" +
                    "m topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - 172.26.8.26 - messages")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_produce")]
        public virtual void AbleToProduceAndConsumeKafka_172_26_8_26_Messages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - 172.26.8.26 - messages", new string[] {
                        "FileProc_Kafka_produce"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
  testRunner.When("I send it to kafka 172.26.8.26:9092 server to TestMessage topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - shortfusedev - messages to fusetest topic")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_produce")]
        public virtual void AbleToProduceAndConsumeKafka_Shortfusedev_MessagesToFusetestTopic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - shortfusedev - messages to fusetest topic", new string[] {
                        "FileProc_Kafka_produce"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.When("I send it to kafka shortfusedev-dn9.westus.cloudapp.azure.com:9092 server to fuse" +
                    "test topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka - shortfusedev")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_consume")]
        public virtual void AbleToConsumeKafka_Shortfusedev()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka - shortfusedev", new string[] {
                        "FileProc_Kafka_consume"});
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "kafka broker"});
            table1.AddRow(new string[] {
                        "shortfusedev-dn9.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "shortfusedev-dn8.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "shortfusedev-dn10.westus.cloudapp.azure.com:9092"});
            table1.AddRow(new string[] {
                        "shortfusedev-dn11.westus.cloudapp.azure.com:9092"});
#line 49
  testRunner.Given("I have kafka brokers", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "topic",
                        "info"});
            table2.AddRow(new string[] {
                        "Location",
                        "FirstOffset: xx; Items: 3"});
#line 55
  testRunner.And("I have kafka topics", ((string)(null)), table2, "And ");
#line 68
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
  testRunner.Then("I should retrieve last 3 messages in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka - 172.26.8.26-29")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_consume")]
        public virtual void AbleToConsumeKafka_172_26_8_26_29()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka - 172.26.8.26-29", new string[] {
                        "FileProc_Kafka_consume"});
#line 76
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "kafka broker"});
            table3.AddRow(new string[] {
                        "172.26.8.26:9092"});
            table3.AddRow(new string[] {
                        "172.26.8.27:9092"});
            table3.AddRow(new string[] {
                        "172.26.8.28:9092"});
            table3.AddRow(new string[] {
                        "172.26.8.29:9092"});
#line 77
  testRunner.Given("I have kafka brokers", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "topic",
                        "info"});
            table4.AddRow(new string[] {
                        "fusetest",
                        "4 messages"});
#line 83
  testRunner.And("I have kafka topics", ((string)(null)), table4, "And ");
#line 95
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
  testRunner.Then("I should retrieve last 3 messages in 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to parse json message Patient")]
        [NUnit.Framework.CategoryAttribute("FileProc_Json")]
        public virtual void AbleToParseJsonMessagePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to parse json message Patient", new string[] {
                        "FileProc_Json"});
#line 118
  this.ScenarioSetup(scenarioInfo);
#line 119
  testRunner.Given("I have json file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 120
  testRunner.When("I parse it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "jsonpath",
                        "value"});
            table5.AddRow(new string[] {
                        "name[0].family[0]",
                        "LAMBERT"});
            table5.AddRow(new string[] {
                        "address[0].addressLine[0]",
                        "7881 Metus Street"});
            table5.AddRow(new string[] {
                        "address[0].addressLine[1]",
                        "none"});
            table5.AddRow(new string[] {
                        "address[0].addressLine[2]",
                        "null"});
#line 121
  testRunner.Then("I should be find in file <messages\\Patient\\item_215.json> matching json values", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to parse json message Condition")]
        [NUnit.Framework.CategoryAttribute("FileProc_Json")]
        public virtual void AbleToParseJsonMessageCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to parse json message Condition", new string[] {
                        "FileProc_Json"});
#line 129
  this.ScenarioSetup(scenarioInfo);
#line 130
  testRunner.Given("I have json file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
  testRunner.When("I parse it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "jsonpath",
                        "value"});
            table6.AddRow(new string[] {
                        "category.coding[?(@.code==\'ccc\')].system",
                        "xxx"});
            table6.AddRow(new string[] {
                        "code.coding[0].code",
                        "V04.81"});
            table6.AddRow(new string[] {
                        "category.coding[0].code",
                        "55607006"});
            table6.AddRow(new string[] {
                        "category.coding[0].primary",
                        "True"});
            table6.AddRow(new string[] {
                        "onset.onsetDateTime.offset",
                        "0"});
#line 132
  testRunner.Then("I should be find in file <messages\\Condition\\item_257.json> matching json values", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to parse xml message with XmlResolver")]
        [NUnit.Framework.CategoryAttribute("Xml_validation_XXE")]
        public virtual void AbleToParseXmlMessageWithXmlResolver()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to parse xml message with XmlResolver", new string[] {
                        "Xml_validation_XXE"});
#line 142
  this.ScenarioSetup(scenarioInfo);
#line 143
  testRunner.Given("I have xml content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
  testRunner.When("I load it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 145
  testRunner.Then("It should be loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
