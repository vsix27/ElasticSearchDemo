// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kafka.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("KafkaBrokers")]
    public partial class KafkaBrokersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KafkaBrokers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "KafkaBrokers", "In order to avoid silly mistakes\r\nAs an Kafka amateur\r\nI want to consume Kafka me" +
                    "tadata", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - shortfusedev-dn9.westus.cloudapp.azure.com:90" +
            "92 - messages to Claim topic")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToProduceAndConsumeKafka_Shortfusedev_Dn9_Westus_Cloudapp_Azure_Com9092_MessagesToClaimTopic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - shortfusedev-dn9.westus.cloudapp.azure.com:90" +
                    "92 - messages to Claim topic", new string[] {
                        "FileProc_Kafka"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
  testRunner.When("I send it to kafka shortfusedev-dn9.westus.cloudapp.azure.com:9092 server to Clai" +
                    "m topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - 172.26.8.26 - messages")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToProduceAndConsumeKafka_172_26_8_26_Messages()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - 172.26.8.26 - messages", new string[] {
                        "FileProc_Kafka"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
  testRunner.When("I send it to kafka 172.26.8.26:9092 server to TestMessage topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to produce and consume kafka - shortfusedev - messages to fusetest topic")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_shortfusedev")]
        public virtual void AbleToProduceAndConsumeKafka_Shortfusedev_MessagesToFusetestTopic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to produce and consume kafka - shortfusedev - messages to fusetest topic", new string[] {
                        "FileProc_Kafka_shortfusedev"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
  testRunner.Given("I have Random expressions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
  testRunner.When("I send it to kafka shortfusedev-dn9.westus.cloudapp.azure.com:9092 server to fuse" +
                    "test topic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
  testRunner.Then("I should consume it in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka - shortfusedev")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka_shortfusedev")]
        public virtual void AbleToConsumeKafka_Shortfusedev()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka - shortfusedev", new string[] {
                        "FileProc_Kafka_shortfusedev"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "kafka broker"});
            table1.AddRow(new string[] {
                        "shortfusedev-dn9.westus.cloudapp.azure.com:9092"});
#line 47
  testRunner.Given("I have kafka brokers", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "topic",
                        "info"});
            table2.AddRow(new string[] {
                        "Coverage",
                        "FirstOffset: xx; Items: 3"});
#line 53
  testRunner.And("I have kafka topics", ((string)(null)), table2, "And ");
#line 65
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
  testRunner.Then("I should retrieve last 3 messages in 10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka - 172.26.11.135")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToConsumeKafka_172_26_11_135()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka - 172.26.11.135", new string[] {
                        "FileProc_Kafka"});
#line 90
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "kafka broker"});
            table3.AddRow(new string[] {
                        "172.26.11.135:9092"});
#line 91
  testRunner.Given("I have kafka brokers", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "topic",
                        "info"});
            table4.AddRow(new string[] {
                        "Practitioner",
                        "10 messages"});
            table4.AddRow(new string[] {
                        "Patient",
                        "4 messages"});
#line 94
  testRunner.And("I have kafka topics", ((string)(null)), table4, "And ");
#line 105
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
  testRunner.Then("I should retrieve last 3 messages in 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to consume kafka - 172.26.8.26")]
        [NUnit.Framework.CategoryAttribute("FileProc_Kafka")]
        public virtual void AbleToConsumeKafka_172_26_8_26()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to consume kafka - 172.26.8.26", new string[] {
                        "FileProc_Kafka"});
#line 109
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "kafka broker"});
            table5.AddRow(new string[] {
                        "172.26.8.26:9092"});
#line 110
  testRunner.Given("I have kafka brokers", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "topic",
                        "info"});
            table6.AddRow(new string[] {
                        "Practitioner",
                        "10 messages"});
            table6.AddRow(new string[] {
                        "Patient",
                        "4 messages"});
#line 113
  testRunner.And("I have kafka topics", ((string)(null)), table6, "And ");
#line 124
  testRunner.When("I call kafka server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
  testRunner.Then("I should retrieve last 3 messages in 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to parse json message Patient")]
        [NUnit.Framework.CategoryAttribute("FileProc_Json")]
        public virtual void AbleToParseJsonMessagePatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to parse json message Patient", new string[] {
                        "FileProc_Json"});
#line 147
  this.ScenarioSetup(scenarioInfo);
#line 148
  testRunner.Given("I have json file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 149
  testRunner.When("I parse it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "jsonpath",
                        "value"});
            table7.AddRow(new string[] {
                        "name[0].family[0]",
                        "LAMBERT"});
            table7.AddRow(new string[] {
                        "address[0].addressLine[0]",
                        "7881 Metus Street"});
            table7.AddRow(new string[] {
                        "address[0].addressLine[1]",
                        "none"});
            table7.AddRow(new string[] {
                        "address[0].addressLine[2]",
                        "null"});
#line 150
  testRunner.Then("I should be find in file <messages\\Patient\\item_215.json> matching json values", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Able to parse json message Condition")]
        [NUnit.Framework.CategoryAttribute("FileProc_Json")]
        public virtual void AbleToParseJsonMessageCondition()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Able to parse json message Condition", new string[] {
                        "FileProc_Json"});
#line 158
  this.ScenarioSetup(scenarioInfo);
#line 159
  testRunner.Given("I have json file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
  testRunner.When("I parse it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "jsonpath",
                        "value"});
            table8.AddRow(new string[] {
                        "category.coding[?(@.code==\'ccc\')].system",
                        "xxx"});
            table8.AddRow(new string[] {
                        "code.coding[0].code",
                        "V04.81"});
            table8.AddRow(new string[] {
                        "category.coding[0].code",
                        "55607006"});
            table8.AddRow(new string[] {
                        "category.coding[0].primary",
                        "True"});
            table8.AddRow(new string[] {
                        "onset.onsetDateTime.offset",
                        "0"});
#line 161
  testRunner.Then("I should be find in file <messages\\Condition\\item_257.json> matching json values", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
